{"ast":null,"code":"var _jsxFileName = \"/home/monky/Repos/skygpu_landing/TerminalLanding/src/fx/TypewriterText.js\",\n  _s = $RefreshSig$();\n// src/fx/TypewriterText.js\nimport React, { useState, useEffect } from 'react';\nimport './TypewriterText.css'; // Import the CSS file for hover styles\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TypewriterText = ({\n  children,\n  speed = 50,\n  hover = false,\n  textSize = '1em',\n  ticking = false,\n  orange = false\n}) => {\n  _s();\n  const [displayedText, setDisplayedText] = useState('');\n  const [isFaded, setIsFaded] = useState(false);\n  useEffect(() => {\n    const text = children;\n    setDisplayedText(''); // Reset the displayed text before starting the typing effect\n\n    let index = 0;\n    const intervalId = setInterval(() => {\n      setDisplayedText(prev => prev + text[index]);\n      index++;\n      if (index === text.length) {\n        clearInterval(intervalId);\n      }\n    }, speed);\n    return () => clearInterval(intervalId);\n  }, [children, speed]);\n  useEffect(() => {\n    if (ticking) {\n      const tickInterval = setInterval(() => {\n        setIsFaded(prev => !prev);\n      }, speed / 50); // Toggle fading every half of the speed duration\n\n      return () => clearInterval(tickInterval);\n    }\n  }, [ticking, speed]);\n  const typewriterClass = `${hover ? 'typewriter hover' : 'typewriter'} ${ticking ? 'ticking' : ''} ${isFaded ? 'faded' : ''} ${orange ? 'orange' : ''}`;\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    className: typewriterClass,\n    style: {\n      fontSize: textSize\n    },\n    children: React.Children.map(displayedText, (char, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n      children: char\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(TypewriterText, \"oM/pXOy3ZCYXx/P5iFiIhbEFXxE=\");\n_c = TypewriterText;\nexport default TypewriterText;\nvar _c;\n$RefreshReg$(_c, \"TypewriterText\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","TypewriterText","children","speed","hover","textSize","ticking","orange","_s","displayedText","setDisplayedText","isFaded","setIsFaded","text","index","intervalId","setInterval","prev","length","clearInterval","tickInterval","typewriterClass","className","style","fontSize","Children","map","char","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/monky/Repos/skygpu_landing/TerminalLanding/src/fx/TypewriterText.js"],"sourcesContent":["// src/fx/TypewriterText.js\nimport React, { useState, useEffect } from 'react';\nimport './TypewriterText.css'; // Import the CSS file for hover styles\n\nconst TypewriterText = ({ children, speed = 50, hover = false, textSize = '1em', ticking = false, orange = false }) => {\n  const [displayedText, setDisplayedText] = useState('');\n  const [isFaded, setIsFaded] = useState(false);\n\n  useEffect(() => {\n    const text = children;\n    setDisplayedText(''); // Reset the displayed text before starting the typing effect\n\n    let index = 0;\n    const intervalId = setInterval(() => {\n      setDisplayedText((prev) => prev + text[index]);\n      index++;\n      if (index === text.length) {\n        clearInterval(intervalId);\n      }\n    }, speed);\n\n    return () => clearInterval(intervalId);\n  }, [children, speed]);\n\n  useEffect(() => {\n    if (ticking) {\n      const tickInterval = setInterval(() => {\n        setIsFaded((prev) => !prev);\n      }, speed / 50); // Toggle fading every half of the speed duration\n\n      return () => clearInterval(tickInterval);\n    }\n  }, [ticking, speed]);\n\n  const typewriterClass = `${hover ? 'typewriter hover' : 'typewriter'} ${ticking ? 'ticking' : ''} ${isFaded ? 'faded' : ''} ${orange ? 'orange' : ''}`;\n\n  return (\n    <span className={typewriterClass} style={{ fontSize: textSize }}>\n       {React.Children.map(displayedText, (char, index) => (\n            <span key={index}>{char}</span>\n        ))}\n    </span>\n  );\n};\n\nexport default TypewriterText;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,sBAAsB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,cAAc,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,KAAK,GAAG,EAAE;EAAEC,KAAK,GAAG,KAAK;EAAEC,QAAQ,GAAG,KAAK;EAAEC,OAAO,GAAG,KAAK;EAAEC,MAAM,GAAG;AAAM,CAAC,KAAK;EAAAC,EAAA;EACrH,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAE7CC,SAAS,CAAC,MAAM;IACd,MAAMe,IAAI,GAAGX,QAAQ;IACrBQ,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC;;IAEtB,IAAII,KAAK,GAAG,CAAC;IACb,MAAMC,UAAU,GAAGC,WAAW,CAAC,MAAM;MACnCN,gBAAgB,CAAEO,IAAI,IAAKA,IAAI,GAAGJ,IAAI,CAACC,KAAK,CAAC,CAAC;MAC9CA,KAAK,EAAE;MACP,IAAIA,KAAK,KAAKD,IAAI,CAACK,MAAM,EAAE;QACzBC,aAAa,CAACJ,UAAU,CAAC;MAC3B;IACF,CAAC,EAAEZ,KAAK,CAAC;IAET,OAAO,MAAMgB,aAAa,CAACJ,UAAU,CAAC;EACxC,CAAC,EAAE,CAACb,QAAQ,EAAEC,KAAK,CAAC,CAAC;EAErBL,SAAS,CAAC,MAAM;IACd,IAAIQ,OAAO,EAAE;MACX,MAAMc,YAAY,GAAGJ,WAAW,CAAC,MAAM;QACrCJ,UAAU,CAAEK,IAAI,IAAK,CAACA,IAAI,CAAC;MAC7B,CAAC,EAAEd,KAAK,GAAG,EAAE,CAAC,CAAC,CAAC;;MAEhB,OAAO,MAAMgB,aAAa,CAACC,YAAY,CAAC;IAC1C;EACF,CAAC,EAAE,CAACd,OAAO,EAAEH,KAAK,CAAC,CAAC;EAEpB,MAAMkB,eAAe,GAAG,GAAGjB,KAAK,GAAG,kBAAkB,GAAG,YAAY,IAAIE,OAAO,GAAG,SAAS,GAAG,EAAE,IAAIK,OAAO,GAAG,OAAO,GAAG,EAAE,IAAIJ,MAAM,GAAG,QAAQ,GAAG,EAAE,EAAE;EAEtJ,oBACEP,OAAA;IAAMsB,SAAS,EAAED,eAAgB;IAACE,KAAK,EAAE;MAAEC,QAAQ,EAAEnB;IAAS,CAAE;IAAAH,QAAA,EAC5DN,KAAK,CAAC6B,QAAQ,CAACC,GAAG,CAACjB,aAAa,EAAE,CAACkB,IAAI,EAAEb,KAAK,kBAC1Cd,OAAA;MAAAE,QAAA,EAAmByB;IAAI,GAAZb,KAAK;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAc,CACjC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEX,CAAC;AAACvB,EAAA,CAvCIP,cAAc;AAAA+B,EAAA,GAAd/B,cAAc;AAyCpB,eAAeA,cAAc;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}