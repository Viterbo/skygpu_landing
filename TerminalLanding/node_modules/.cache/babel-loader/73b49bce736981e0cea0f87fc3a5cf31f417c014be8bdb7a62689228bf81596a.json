{"ast":null,"code":"var _jsxFileName = \"/home/monky/Repos/skygpu_landing/TerminalLanding/src/components/Viewer.js\",\n  _s = $RefreshSig$();\n// /src/component/Viewer.js\nimport React from 'react';\nimport './Viewer.css';\nimport TypewriterText from '../fx/TypewriterText';\nimport { useViewerState } from '../states/viewer_state'; // Import the custom hook to access viewer state\nimport IntroView from './view_content/introView';\nimport AlphaView from './view_content/alphaView';\nimport BetaView from './view_content/betaView';\nimport DefaultView from './view_content/defaultView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Viewer = () => {\n  _s();\n  const {\n    viewerState\n  } = useViewerState(); // Get the viewer state using the custom hook\n\n  // Render content based on viewer state\n  let content;\n  switch (viewerState) {\n    case 'none':\n      content = /*#__PURE__*/_jsxDEV(DefaultView, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 23\n      }, this);\n      break;\n    case 'intro':\n      content = /*#__PURE__*/_jsxDEV(IntroView, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 23\n      }, this);\n      break;\n    case 'alpha':\n      content = /*#__PURE__*/_jsxDEV(AlphaView, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 23\n      }, this);\n      break;\n    case 'beta':\n      content = /*#__PURE__*/_jsxDEV(BetaView, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 23\n      }, this);\n      break;\n    default:\n      content = /*#__PURE__*/_jsxDEV(TypewriterText, {\n        children: \"...waiting for selection.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 23\n      }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"viewer\",\n    children: content\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n_s(Viewer, \"TczYKLD+on+cLt0mH7PthEGsBjk=\", false, function () {\n  return [useViewerState];\n});\n_c = Viewer;\nexport default Viewer;\nvar _c;\n$RefreshReg$(_c, \"Viewer\");","map":{"version":3,"names":["React","TypewriterText","useViewerState","IntroView","AlphaView","BetaView","DefaultView","jsxDEV","_jsxDEV","Viewer","_s","viewerState","content","fileName","_jsxFileName","lineNumber","columnNumber","children","className","_c","$RefreshReg$"],"sources":["/home/monky/Repos/skygpu_landing/TerminalLanding/src/components/Viewer.js"],"sourcesContent":["// /src/component/Viewer.js\nimport React from 'react';\nimport './Viewer.css';\nimport TypewriterText from '../fx/TypewriterText';\nimport { useViewerState } from '../states/viewer_state'; // Import the custom hook to access viewer state\nimport IntroView from './view_content/introView';\nimport AlphaView from './view_content/alphaView';\nimport BetaView from './view_content/betaView';\nimport DefaultView from './view_content/defaultView';\n\n\nconst Viewer = () => {\n    const { viewerState } = useViewerState(); // Get the viewer state using the custom hook\n\n    // Render content based on viewer state\n    let content;\n    switch (viewerState) {\n        case 'none':\n            content = <DefaultView/>;\n            break;\n        case 'intro':\n            content = <IntroView/>;\n            break;\n        case 'alpha':\n            content = <AlphaView/>;\n            break;\n        case 'beta':\n            content = <BetaView/>;\n            break;\n        default:\n            content = <TypewriterText>...waiting for selection.</TypewriterText>;\n    }\n\n    return (\n        <div className=\"viewer\">\n            {content}\n        </div>\n    );\n};\n\nexport default Viewer;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,cAAc;AACrB,OAAOC,cAAc,MAAM,sBAAsB;AACjD,SAASC,cAAc,QAAQ,wBAAwB,CAAC,CAAC;AACzD,OAAOC,SAAS,MAAM,0BAA0B;AAChD,OAAOC,SAAS,MAAM,0BAA0B;AAChD,OAAOC,QAAQ,MAAM,yBAAyB;AAC9C,OAAOC,WAAW,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGrD,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM;IAAEC;EAAY,CAAC,GAAGT,cAAc,CAAC,CAAC,CAAC,CAAC;;EAE1C;EACA,IAAIU,OAAO;EACX,QAAQD,WAAW;IACf,KAAK,MAAM;MACPC,OAAO,gBAAGJ,OAAA,CAACF,WAAW;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC;MACxB;IACJ,KAAK,OAAO;MACRJ,OAAO,gBAAGJ,OAAA,CAACL,SAAS;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC;MACtB;IACJ,KAAK,OAAO;MACRJ,OAAO,gBAAGJ,OAAA,CAACJ,SAAS;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC;MACtB;IACJ,KAAK,MAAM;MACPJ,OAAO,gBAAGJ,OAAA,CAACH,QAAQ;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC;MACrB;IACJ;MACIJ,OAAO,gBAAGJ,OAAA,CAACP,cAAc;QAAAgB,QAAA,EAAC;MAAyB;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAgB,CAAC;EAC5E;EAEA,oBACIR,OAAA;IAAKU,SAAS,EAAC,QAAQ;IAAAD,QAAA,EAClBL;EAAO;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEd,CAAC;AAACN,EAAA,CA3BID,MAAM;EAAA,QACgBP,cAAc;AAAA;AAAAiB,EAAA,GADpCV,MAAM;AA6BZ,eAAeA,MAAM;AAAC,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}