{"ast":null,"code":"var _jsxFileName = \"/home/monky/Repos/skygpu_landing/TerminalLanding/src/TypewriterText.js\",\n  _s = $RefreshSig$();\n// src/TypewriterText.js\nimport React, { useState, useEffect, Children, cloneElement } from 'react';\nimport './TypewriterText.css'; // Import the CSS file for hover styles\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TypewriterText = ({\n  children,\n  speed = 50,\n  hover = false,\n  textSize = '1em'\n}) => {\n  _s();\n  const [displayedText, setDisplayedText] = useState('');\n  useEffect(() => {\n    const text = getTextFromChildren(children);\n    setDisplayedText(''); // Reset the displayed text before starting the typing effect\n\n    let index = 0;\n    const intervalId = setInterval(() => {\n      setDisplayedText(prev => prev + text[index]);\n      index++;\n      if (index === text.length) {\n        clearInterval(intervalId);\n      }\n    }, speed);\n    return () => clearInterval(intervalId);\n  }, [children, speed]);\n  const getTextFromChildren = children => {\n    return Children.toArray(children).reduce((acc, child) => {\n      if (typeof child === 'string') {\n        return acc + child;\n      } else if (child.props.children) {\n        return acc + getTextFromChildren(child.props.children);\n      } else {\n        return acc;\n      }\n    }, '');\n  };\n  const typewriteChildren = children => {\n    return Children.map(children, child => {\n      if (typeof child === 'string') {\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          className: hover ? 'typewriter hover' : 'typewriter',\n          style: {\n            fontSize: textSize\n          },\n          children: displayedText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this);\n      } else if (child.props.children) {\n        return /*#__PURE__*/cloneElement(child, {}, typewriteChildren(child.props.children));\n      } else {\n        return child;\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: typewriteChildren(children)\n  }, void 0, false);\n};\n_s(TypewriterText, \"PLbRMeWiJa2NBtcoy3qeXvmWyJg=\");\n_c = TypewriterText;\nexport default TypewriterText;\nvar _c;\n$RefreshReg$(_c, \"TypewriterText\");","map":{"version":3,"names":["React","useState","useEffect","Children","cloneElement","jsxDEV","_jsxDEV","Fragment","_Fragment","TypewriterText","children","speed","hover","textSize","_s","displayedText","setDisplayedText","text","getTextFromChildren","index","intervalId","setInterval","prev","length","clearInterval","toArray","reduce","acc","child","props","typewriteChildren","map","className","style","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/monky/Repos/skygpu_landing/TerminalLanding/src/TypewriterText.js"],"sourcesContent":["// src/TypewriterText.js\nimport React, { useState, useEffect, Children, cloneElement } from 'react';\nimport './TypewriterText.css'; // Import the CSS file for hover styles\n\nconst TypewriterText = ({ children, speed = 50, hover = false, textSize = '1em' }) => {\n  const [displayedText, setDisplayedText] = useState('');\n\n  useEffect(() => {\n    const text = getTextFromChildren(children);\n    setDisplayedText(''); // Reset the displayed text before starting the typing effect\n\n    let index = 0;\n    const intervalId = setInterval(() => {\n      setDisplayedText((prev) => prev + text[index]);\n      index++;\n      if (index === text.length) {\n        clearInterval(intervalId);\n      }\n    }, speed);\n\n    return () => clearInterval(intervalId);\n  }, [children, speed]);\n\n  const getTextFromChildren = (children) => {\n    return Children.toArray(children).reduce((acc, child) => {\n      if (typeof child === 'string') {\n        return acc + child;\n      } else if (child.props.children) {\n        return acc + getTextFromChildren(child.props.children);\n      } else {\n        return acc;\n      }\n    }, '');\n  };\n\n  const typewriteChildren = (children) => {\n    return Children.map(children, (child) => {\n      if (typeof child === 'string') {\n        return (\n          <span className={hover ? 'typewriter hover' : 'typewriter'} style={{ fontSize: textSize }}>\n            {displayedText}\n          </span>\n        );\n      } else if (child.props.children) {\n        return cloneElement(child, {}, typewriteChildren(child.props.children));\n      } else {\n        return child;\n      }\n    });\n  };\n\n  return <>{typewriteChildren(children)}</>;\n};\n\nexport default TypewriterText;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,YAAY,QAAQ,OAAO;AAC1E,OAAO,sBAAsB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE/B,MAAMC,cAAc,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,KAAK,GAAG,EAAE;EAAEC,KAAK,GAAG,KAAK;EAAEC,QAAQ,GAAG;AAAM,CAAC,KAAK;EAAAC,EAAA;EACpF,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAEtDC,SAAS,CAAC,MAAM;IACd,MAAMe,IAAI,GAAGC,mBAAmB,CAACR,QAAQ,CAAC;IAC1CM,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC;;IAEtB,IAAIG,KAAK,GAAG,CAAC;IACb,MAAMC,UAAU,GAAGC,WAAW,CAAC,MAAM;MACnCL,gBAAgB,CAAEM,IAAI,IAAKA,IAAI,GAAGL,IAAI,CAACE,KAAK,CAAC,CAAC;MAC9CA,KAAK,EAAE;MACP,IAAIA,KAAK,KAAKF,IAAI,CAACM,MAAM,EAAE;QACzBC,aAAa,CAACJ,UAAU,CAAC;MAC3B;IACF,CAAC,EAAET,KAAK,CAAC;IAET,OAAO,MAAMa,aAAa,CAACJ,UAAU,CAAC;EACxC,CAAC,EAAE,CAACV,QAAQ,EAAEC,KAAK,CAAC,CAAC;EAErB,MAAMO,mBAAmB,GAAIR,QAAQ,IAAK;IACxC,OAAOP,QAAQ,CAACsB,OAAO,CAACf,QAAQ,CAAC,CAACgB,MAAM,CAAC,CAACC,GAAG,EAAEC,KAAK,KAAK;MACvD,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;QAC7B,OAAOD,GAAG,GAAGC,KAAK;MACpB,CAAC,MAAM,IAAIA,KAAK,CAACC,KAAK,CAACnB,QAAQ,EAAE;QAC/B,OAAOiB,GAAG,GAAGT,mBAAmB,CAACU,KAAK,CAACC,KAAK,CAACnB,QAAQ,CAAC;MACxD,CAAC,MAAM;QACL,OAAOiB,GAAG;MACZ;IACF,CAAC,EAAE,EAAE,CAAC;EACR,CAAC;EAED,MAAMG,iBAAiB,GAAIpB,QAAQ,IAAK;IACtC,OAAOP,QAAQ,CAAC4B,GAAG,CAACrB,QAAQ,EAAGkB,KAAK,IAAK;MACvC,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;QAC7B,oBACEtB,OAAA;UAAM0B,SAAS,EAAEpB,KAAK,GAAG,kBAAkB,GAAG,YAAa;UAACqB,KAAK,EAAE;YAAEC,QAAQ,EAAErB;UAAS,CAAE;UAAAH,QAAA,EACvFK;QAAa;UAAAoB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACV,CAAC;MAEX,CAAC,MAAM,IAAIV,KAAK,CAACC,KAAK,CAACnB,QAAQ,EAAE;QAC/B,oBAAON,YAAY,CAACwB,KAAK,EAAE,CAAC,CAAC,EAAEE,iBAAiB,CAACF,KAAK,CAACC,KAAK,CAACnB,QAAQ,CAAC,CAAC;MACzE,CAAC,MAAM;QACL,OAAOkB,KAAK;MACd;IACF,CAAC,CAAC;EACJ,CAAC;EAED,oBAAOtB,OAAA,CAAAE,SAAA;IAAAE,QAAA,EAAGoB,iBAAiB,CAACpB,QAAQ;EAAC,gBAAG,CAAC;AAC3C,CAAC;AAACI,EAAA,CAhDIL,cAAc;AAAA8B,EAAA,GAAd9B,cAAc;AAkDpB,eAAeA,cAAc;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}